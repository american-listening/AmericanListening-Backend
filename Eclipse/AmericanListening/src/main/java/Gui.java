import java.awt.Dimension;

import javax.swing.DefaultListModel;

import com.wrapper.spotify.model_objects.specification.Track;

/**
 * Test UI.
 * 
 * @author Ethan Vrhel
 *
 */
public class Gui extends javax.swing.JFrame {

	private static final long serialVersionUID = -4015132482076731498L;

	private DefaultListModel<String> model;
	private Track[] currentTracks;
	private Track selectedTrack;

	/**
	 * Creates a new gui.
	 */
	public Gui() {
		initComponents();
		setLocationRelativeTo(null);
		model = new DefaultListModel<>();
		songList.setModel(model);
		setSize(new Dimension(480, 309));
		pack();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		songListScrollPane = new javax.swing.JScrollPane();
		songList = new javax.swing.JList();
		searchButton = new javax.swing.JButton();
		searchField = new javax.swing.JTextField();
		searchLabel = new javax.swing.JLabel();
		songLabel = new javax.swing.JLabel();
		songField = new javax.swing.JTextField();
		startTimeLabel = new javax.swing.JLabel();
		startTimeField = new javax.swing.JTextField();
		endTimeField = new javax.swing.JTextField();
		endTimeLabel = new javax.swing.JLabel();
		lengthLabel = new javax.swing.JLabel();
		lengthField = new javax.swing.JTextField();
		validLengthLabel = new javax.swing.JLabel();
		validLengthField = new javax.swing.JTextField();
		submitButton = new javax.swing.JButton();
		menuBar = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		exitMenuItem = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Application");
		setResizable(false);
		setSize(new java.awt.Dimension(0, 0));

		songList.setModel(new javax.swing.AbstractListModel() {
			String[] strings = { "song0", "song1", "song2" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		songList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		songList.setToolTipText("");
		songList.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				songListMouseClicked(evt);
			}
		});
		songListScrollPane.setViewportView(songList);

		searchButton.setText("Search");
		searchButton.setToolTipText("Search");
		searchButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				searchButtonActionPerformed(evt);
			}
		});

		searchField.setText("songField");
		searchField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				searchFieldKeyTyped(evt);
			}
		});

		searchLabel.setText("Search:");

		songLabel.setText("Song:");

		songField.setEditable(false);
		songField.setText("songName");

		startTimeLabel.setText("Start Time:");

		startTimeField.setText("startTime");
		startTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				startTimeFieldKeyTyped(evt);
			}
		});

		endTimeField.setText("endTime");
		endTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyTyped(java.awt.event.KeyEvent evt) {
				endTimeFieldKeyTyped(evt);
			}
		});

		endTimeLabel.setText("End Time:");

		lengthLabel.setText("Length:");

		lengthField.setEditable(false);
		lengthField.setText("length");

		validLengthLabel.setText("Valid Length?");

		validLengthField.setEditable(false);
		validLengthField.setText("valid");

		submitButton.setText("Submit");
		submitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				submitButtonActionPerformed(evt);
			}
		});

		fileMenu.setText("File");

		exitMenuItem.setText("Exit");
		exitMenuItem.setToolTipText("Exit the application");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitMenuItemActionPerformed(evt);
			}
		});
		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		setJMenuBar(menuBar);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addComponent(searchLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(searchField))
								.addComponent(songListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createSequentialGroup().addComponent(songLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(songField))
								.addGroup(layout.createSequentialGroup().addComponent(lengthLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(lengthField))
								.addGroup(layout.createSequentialGroup().addComponent(endTimeLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(endTimeField))
								.addGroup(layout.createSequentialGroup().addComponent(validLengthLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(validLengthField))
								.addGroup(layout.createSequentialGroup().addComponent(startTimeLabel)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(startTimeField, javax.swing.GroupLayout.DEFAULT_SIZE, 406,
												Short.MAX_VALUE)))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(searchLabel))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(searchButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(songListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(songLabel).addComponent(songField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(startTimeLabel)
								.addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(endTimeLabel)
								.addComponent(endTimeField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lengthLabel).addComponent(lengthField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(validLengthLabel).addComponent(validLengthField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
						.addComponent(submitButton).addContainerGap()));

		getAccessibleContext().setAccessibleDescription("");

		pack();
	}// </editor-fold>

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void songListMouseClicked(java.awt.event.MouseEvent evt) {
		if (evt.getClickCount() == 2) {
			songField.setText(model.get(songList.getSelectedIndex()));
			selectedTrack = currentTracks[songList.getSelectedIndex()];
		}
	}

	private void startTimeFieldKeyTyped(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:
	}

	private void endTimeFieldKeyTyped(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:
	}

	private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			long startTime = Main.parseTime(startTimeField.getText());
			long endTime = Main.parseTime(endTimeField.getText());
			lengthField.setText(Main.toTime(endTime - startTime));
			if (startTime < 0 || endTime > selectedTrack.getDurationMs()) {
				validLengthField.setText("false");
			} else {
				validLengthField.setText("true");
			}
		} catch (RuntimeException e) {
			System.err.println("Failure: " + e);
			validLengthField.setText("false");
		}
	}

	private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:
	}

	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
		updateList(Main.search(searchField.getText()));
	}

	// Variables declaration - do not modify
	private javax.swing.JTextField endTimeField;
	private javax.swing.JLabel endTimeLabel;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JTextField lengthField;
	private javax.swing.JLabel lengthLabel;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JButton searchButton;
	private javax.swing.JTextField searchField;
	private javax.swing.JLabel searchLabel;
	private javax.swing.JPanel searchPanel;
	private javax.swing.JTextField songField;
	private javax.swing.JLabel songLabel;
	private javax.swing.JList songList;
	private javax.swing.JScrollPane songListScrollPane;
	private javax.swing.JPanel songPanel;
	private javax.swing.JTextField startTimeField;
	private javax.swing.JLabel startTimeLabel;
	private javax.swing.JButton submitButton;
	private javax.swing.JTextField validLengthField;
	private javax.swing.JLabel validLengthLabel;
	// End of variables declaration

	/**
	 * Updates the search results with a list of tracks.
	 * 
	 * @param tracks The tracks to update with.
	 */
	public void updateList(final Track[] tracks) {
		model.clear();
		for (Track track : tracks) {
			model.addElement(track.getName() + " - " + track.getArtists()[0].getName());
		}
		this.currentTracks = tracks;
	}
}
